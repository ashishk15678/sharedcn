// Prisma schema for BetterAuth and component deployment

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  // Change to 'postgresql' or 'mysql' if needed
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String?
  image         String?
  authToken     String?     @unique @default(cuid())
  username      String?     @unique
  components    Component[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  emailVerified Boolean
  sessions      Session[]
  accounts      Account[]
  feedbacks     Feedback[]

  @@map("user")
}

model Component {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  alias       String   @unique
  description String
  dependent   String?
  code        Json[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Feedback {
  id          String   @id @default(uuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  content     String
  rating      Int // 1-4
  isAnonymous Boolean  @default(false)
  createdAt   DateTime @default(now())
}
